;; ==== obstaculos ====

patches-own [
  chemical
  food
  nest?
  nest-scent
  food-source-number
  obstáculo?  ;; nova variável
]

to setup
  clear-all
  set-default-shape turtles "bug"
  create-turtles population [
    set size 2
    set color red
  ]
  setup-patches
  setup-obstaculos ;; novo procedimento
  reset-ticks
end

to setup-patches
  ask patches [
    setup-nest
    setup-food
    set obstáculo? false ;; inicializar
    recolor-patch
  ]
end

to setup-obstaculos
  ask patches [
    if random 10000 < random 10 [
      ask patches in-radius 3 [
        set obstáculo? true
        set pcolor   ;;adicione cor do obstaculo
      ]
    ]
  ]
end

to recolor-patch
  if obstáculo? [
    set pcolor gray
  ]

  if (not obstáculo?) and nest? [
    set pcolor violet
  ]

  if (not obstáculo?) and (not nest?) and (food > 0) [
    if food-source-number = 1 [ set pcolor cyan ]
    if food-source-number = 2 [ set pcolor sky ]
    if food-source-number = 3 [ set pcolor blue ]
  ]

  if (not obstáculo?) and (not nest?) and (food = 0) [
    set pcolor scale-color green chemical 0.1 5
  ]
end

to go
  ask turtles [
    if who >= ticks [ stop ]
    ifelse color = red
    [ look-for-food ]
    [ return-to-nest ]
    wiggle
    move-forward 1 ;; usar o movimento com verificação de obstáculo
  ]
  diffuse chemical (diffusion-rate / 100)
  ask patches [
    set chemical chemical * (100 - evaporation-rate) / 100
    recolor-patch
  ]
  tick
end


to wiggle
  rt random   ;adicione numero random
  lt random   ;adicione numero random
  if not can-move? 1 [ rt 180 ]
  let obstaculo one-of patches in-radius 1 with [obstáculo?]
  if obstaculo != nobody [ rt 180 ]
end

to move-forward [steps]
  let moved 0
  while [moved < steps] [
    let next-patch patch-ahead 1
    ifelse next-patch != nobody and [not obstáculo?] of next-patch [
      fd 0.75
      set moved moved + 1
    ] [
      stop
    ]
  ]
end
